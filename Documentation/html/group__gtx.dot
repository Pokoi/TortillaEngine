digraph "GTX Extensions (Experimental)"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=box];
  rankdir=LR;
  Node26 [label="GLM_GTX_matrix_interpolation",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__matrix__interpolation.html",tooltip="Allows to directly interpolate two exiciting matrices."];
  Node27 [label="GLM_GTX_matrix_major\l_storage",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__matrix__major__storage.html",tooltip="Build matrices with specific matrix order, row or column."];
  Node5 [label="GLM_GTX_color_space",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__color__space.html",tooltip="Related to RGB to HSV conversions and operations."];
  Node39 [label="GLM_GTX_polar_coordinates",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__polar__coordinates.html",tooltip="Conversion from Euclidean space to polar space and revert."];
  Node1 [label="GTX Extensions (Experimental)",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Functions and types that the GLSL specification doesn't define, but useful to have for a C++ program."];
  Node10 [label="GLM_GTX_dual_quaternion",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__dual__quaternion.html",tooltip="Defines a templated dual-quaternion type and several dual-quaternion operations."];
  Node33 [label="GLM_GTX_normal",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__normal.html",tooltip="Compute the normal of a triangle."];
  Node53 [label="GLM_GTX_type_trait",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__type__trait.html",tooltip="Defines traits for each type."];
  Node7 [label="GLM_GTX_common",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__common.html",tooltip="Provide functions to increase the compatibility with Cg and HLSL languages."];
  Node21 [label="GLM_GTX_intersect",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__intersect.html",tooltip="Add intersection functions."];
  Node4 [label="GLM_GTX_closest_point",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__closest__point.html",tooltip="Find the point on a straight line which is the closet of a point."];
  Node22 [label="GLM_GTX_io",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__io.html",tooltip="std::[w]ostream support for glm types"];
  Node31 [label="GLM_GTX_mixed_producte",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__mixed__product.html",tooltip="Mixed product of 3 vectors."];
  Node17 [label="GLM_GTX_gradient_paint",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__gradient__paint.html",tooltip="Functions that return the color of procedural gradient for specific coordinates. <glm/gtx/gradient_pa..."];
  Node20 [label="GLM_GTX_integer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__integer.html",tooltip="Add support for integer for core functions."];
  Node3 [label="GLM_GTX_bit",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__bit.html",tooltip="Allow to perform bit operations on integer values."];
  Node49 [label="GLM_GTX_string_cast",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__string__cast.html",tooltip="Setup strings for GLM type values."];
  Node13 [label="GLM_GTX_extented_min_max",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__extented__min__max.html",tooltip=" "];
  Node32 [label="GLM_GTX_norm",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__norm.html",tooltip="Various ways to compute vector norms."];
  Node48 [label="GLM_GTX_std_based_type",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__std__based__type.html",tooltip="Adds vector types based on STL value types. <glm/gtx/std_based_type.hpp> need to be included to use t..."];
  Node35 [label="GLM_GTX_number_precision",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__number__precision.html",tooltip="Defined size types."];
  Node50 [label="GLM_GTX_transform",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__transform.html",tooltip="Add transformation matrices."];
  Node24 [label="GLM_GTX_matrix_cross\l_product",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__matrix__cross__product.html",tooltip="Build cross product matrices."];
  Node56 [label="GLM_GTX_wrap",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__wrap.html",tooltip="Wrapping mode of texture coordinates."];
  Node46 [label="GLM_GTX_scalar_relational",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__scalar__relational.html",tooltip="Extend a position from a source to a position at a defined length."];
  Node55 [label="GLM_GTX_vector_query",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__vector__query.html",tooltip="Query informations of vector types."];
  Node28 [label="GLM_GTX_matrix_operation",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__matrix__operation.html",tooltip="Build diagonal matrices from vectors."];
  Node29 [label="GLM_GTX_matrix_query",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__matrix__query.html",tooltip="Query to evaluate matrix properties."];
  Node9 [label="GLM_GTX_component_wise",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__component__wise.html",tooltip="Operations between components of a type."];
  Node19 [label="GLM_GTX_hash",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__hash.html",tooltip="Add std::hash support for glm types."];
  Node42 [label="GLM_GTX_range",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__range.html",tooltip="Defines begin and end for vectors and matrices. Useful for range-based for loop. The range is defined..."];
  Node15 [label="GLM_GTX_fast_square_root",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__fast__square__root.html",tooltip="Fast but less accurate implementations of square root based functions."];
  Node11 [label="GLM_GTX_euler_angles",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__euler__angles.html",tooltip="Build matrices from Euler angles."];
  Node44 [label="GLM_GTX_rotate_normalized_axis",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__rotate__normalized__axis.html",tooltip="Quaternions and matrices rotations around normalized axis."];
  Node51 [label="GLM_GTX_transform2",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__transform2.html",tooltip="Add extra transformation matrices."];
  Node52 [label="GLM_GTX_type_aligned",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__type__aligned.html",tooltip="Defines aligned types."];
  Node6 [label="GLM_GTX_color_space\l_YCoCg",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__color__space___y_co_cg.html",tooltip="RGB to YCoCg conversions and operations."];
  Node12 [label="GLM_GTX_extend",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__extend.html",tooltip="Extend a position from a source to a position at a defined length."];
  Node47 [label="GLM_GTX_spline",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__spline.html",tooltip="Spline functions."];
  Node43 [label="GLM_GTX_raw_data",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__raw__data.html",tooltip="Projection of a vector to other one."];
  Node14 [label="GLM_GTX_fast_exponential",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__fast__exponential.html",tooltip="Fast but less accurate implementations of exponential based functions."];
  Node23 [label="GLM_GTX_log_base",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__log__base.html",tooltip="Logarithm for any base. base can be a vector or a scalar."];
  Node8 [label="GLM_GTX_compatibility",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__compatibility.html",tooltip="Provide functions to increase the compatibility with Cg and HLSL languages."];
  Node2 [label="GLM_GTX_associated\l_min_max",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__associated__min__max.html",tooltip="Min and max functions that return associated values not the compared onces. <glm/gtx/associated_min_m..."];
  Node36 [label="GLM_GTX_optimum_pow",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__optimum__pow.html",tooltip="Integer exponentiation of power functions."];
  Node18 [label="GLM_GTX_handed_coordinate\l_space",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__handed__coordinate__space.html",tooltip="To know if a set of three basis vectors defines a right or left-handed coordinate system."];
  Node34 [label="GLM_GTX_normalize_dot",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__normalize__dot.html",tooltip="Dot product of vectors that need to be normalize with a single square root."];
  Node41 [label="GLM_GTX_quaternion",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__quaternion.html",tooltip="Extented quaternion types and functions."];
  Node54 [label="GLM_GTX_vector_angle",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__vector__angle.html",tooltip="Compute angle between vectors."];
  Node38 [label="GLM_GTX_perpendicular",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__perpendicular.html",tooltip="Perpendicular of a vector from other one."];
  Node37 [label="GLM_GTX_orthonormalize",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__orthonormalize.html",tooltip="Orthonormalize matrices."];
  Node25 [label="GLM_GTX_matrix_decompose",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__matrix__decompose.html",tooltip="Decomposes a model matrix to translations, rotation and scale components."];
  Node40 [label="GLM_GTX_projection",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__projection.html",tooltip="Projection of a vector to other one."];
  Node30 [label="GLM_GTX_matrix_transform_2d",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__matrix__transform__2d.html",tooltip="Defines functions that generate common 2d transformation matrices."];
  Node16 [label="GLM_GTX_fast_trigonometry",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__fast__trigonometry.html",tooltip="Fast but less accurate implementations of trigonometric functions."];
  Node45 [label="GLM_GTX_rotate_vector",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__gtx__rotate__vector.html",tooltip="Function to directly rotate a vector."];
  Node1->Node2 [shape=plaintext, dir="back", style="solid"];
  Node1->Node3 [shape=plaintext, dir="back", style="solid"];
  Node1->Node4 [shape=plaintext, dir="back", style="solid"];
  Node1->Node5 [shape=plaintext, dir="back", style="solid"];
  Node1->Node6 [shape=plaintext, dir="back", style="solid"];
  Node1->Node7 [shape=plaintext, dir="back", style="solid"];
  Node1->Node8 [shape=plaintext, dir="back", style="solid"];
  Node1->Node9 [shape=plaintext, dir="back", style="solid"];
  Node1->Node10 [shape=plaintext, dir="back", style="solid"];
  Node1->Node11 [shape=plaintext, dir="back", style="solid"];
  Node1->Node12 [shape=plaintext, dir="back", style="solid"];
  Node1->Node13 [shape=plaintext, dir="back", style="solid"];
  Node1->Node14 [shape=plaintext, dir="back", style="solid"];
  Node1->Node15 [shape=plaintext, dir="back", style="solid"];
  Node1->Node16 [shape=plaintext, dir="back", style="solid"];
  Node1->Node17 [shape=plaintext, dir="back", style="solid"];
  Node1->Node18 [shape=plaintext, dir="back", style="solid"];
  Node1->Node19 [shape=plaintext, dir="back", style="solid"];
  Node1->Node20 [shape=plaintext, dir="back", style="solid"];
  Node1->Node21 [shape=plaintext, dir="back", style="solid"];
  Node1->Node22 [shape=plaintext, dir="back", style="solid"];
  Node1->Node23 [shape=plaintext, dir="back", style="solid"];
  Node1->Node24 [shape=plaintext, dir="back", style="solid"];
  Node1->Node25 [shape=plaintext, dir="back", style="solid"];
  Node1->Node26 [shape=plaintext, dir="back", style="solid"];
  Node1->Node27 [shape=plaintext, dir="back", style="solid"];
  Node1->Node28 [shape=plaintext, dir="back", style="solid"];
  Node1->Node29 [shape=plaintext, dir="back", style="solid"];
  Node1->Node30 [shape=plaintext, dir="back", style="solid"];
  Node1->Node31 [shape=plaintext, dir="back", style="solid"];
  Node1->Node32 [shape=plaintext, dir="back", style="solid"];
  Node1->Node33 [shape=plaintext, dir="back", style="solid"];
  Node1->Node34 [shape=plaintext, dir="back", style="solid"];
  Node1->Node35 [shape=plaintext, dir="back", style="solid"];
  Node1->Node36 [shape=plaintext, dir="back", style="solid"];
  Node1->Node37 [shape=plaintext, dir="back", style="solid"];
  Node1->Node38 [shape=plaintext, dir="back", style="solid"];
  Node1->Node39 [shape=plaintext, dir="back", style="solid"];
  Node1->Node40 [shape=plaintext, dir="back", style="solid"];
  Node1->Node41 [shape=plaintext, dir="back", style="solid"];
  Node1->Node42 [shape=plaintext, dir="back", style="solid"];
  Node1->Node43 [shape=plaintext, dir="back", style="solid"];
  Node1->Node44 [shape=plaintext, dir="back", style="solid"];
  Node1->Node45 [shape=plaintext, dir="back", style="solid"];
  Node1->Node46 [shape=plaintext, dir="back", style="solid"];
  Node1->Node47 [shape=plaintext, dir="back", style="solid"];
  Node1->Node48 [shape=plaintext, dir="back", style="solid"];
  Node1->Node49 [shape=plaintext, dir="back", style="solid"];
  Node1->Node50 [shape=plaintext, dir="back", style="solid"];
  Node1->Node51 [shape=plaintext, dir="back", style="solid"];
  Node1->Node52 [shape=plaintext, dir="back", style="solid"];
  Node1->Node53 [shape=plaintext, dir="back", style="solid"];
  Node1->Node54 [shape=plaintext, dir="back", style="solid"];
  Node1->Node55 [shape=plaintext, dir="back", style="solid"];
  Node1->Node56 [shape=plaintext, dir="back", style="solid"];
}
